The problem specifies a requirement of time complexity of O(log n) which dictates a potential solution based on binary search for the index of the number to search for. The solution to this problem consists 2 parts. The first step is to find the pivot point in the rotation arranged array. This step identifies the 2 sub arrays if present which are on their own sorted. This is implemented using a recursive pivot_index function. The next component which actually does the search is the binary search. Based on which sub array the number might be present in, the sub-array is selected using sub-array end value comparisons with the number to find and then binary search is used to find the index of the number if present. Overall the time complexity will be O (klog n) where k is a constant hence O(log n). The space complexity is O(n) for the input and for the function themselves O(1).